{"version":3,"sources":["HomeScreen/Nav/Nav.jsx","Requests.js","axios.js","HomeScreen/HomeScreen.jsx","firebaseControl.js","HomeScreen/Login/SignInScreen/SignInScreen.jsx","HomeScreen/Login/Login.jsx","features/user/userSlice.js","HomeScreen/Login/ProfileScreen/ProfileScreen.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","hanldeShow","history","useHistory","transitionNavbar","window","scrollY","useEffect","addEventListener","className","onClick","push","src","alt","API_KEY","axios","create","baseURL","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","SignInScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","catch","error","alert","message","createUserWithEmailAndPassword","Login","signIn","setSignIn","action","userSlice","createSlice","name","initialState","user","reducers","login","state","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ded89eb0.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react'\nimport { useHistory } from 'react-router';\nimport './styles.css'\n\nfunction Nav() {\n    const [show,hanldeShow] = useState(false);\n    const history = useHistory();\n\n    const transitionNavbar = () => {\n        if(window.scrollY > 100){\n            hanldeShow(true);\n        }else{\n            hanldeShow(false);\n        }\n    }\n\n    useEffect(()=>{\n        window.addEventListener(\"scroll\", transitionNavbar);\n    })\n    return (\n        <div className={`nav ${show && \"nav__black\"}`}>\n            <div className=\"nav__container\">\n                <img\n                  onClick={()=>{history.push(\"/\")}} \n                  src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \n                  alt=\"Netflix Logo\" \n                  className=\"nav__logo\" \n                />\n                <img \n                  onClick={()=>{history.push(\"/profile\")}} \n                  src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" \n                  alt=\"Avatar\" \n                  className=\"nav__avatar\" \n                />\n            </div>\n\n        </div>\n    )\n}\n\nexport default Nav\n","const API_KEY = \"0811f7cab26d0c41f14c7646a7597b0d\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixoriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n// https://api.themoviedb.org/3/trending/all/week?api_key=0811f7cab26d0c41f14c7646a7597b0d&language=en-US\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React from 'react';\nimport Nav from './Nav';\nimport Banner from './Banner';\nimport Row from './Row';\nimport './styles.css'\nimport requests from '../Requests';\n\nfunction HomeScreen() {\n    return (\n        <div className=\"homeScreen\">\n            {/* Nav */}\n            <Nav/>\n\n            {/* Banner */}\n            <Banner/>\n\n            {/* Row */}\n            \n            <Row\n            title=\"Netflix Originals\"\n            fetchUrl={requests.fetchNetflixoriginals}\n            isLargeRow\n            />\n            <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n            <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n            <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n            <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n            <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n            <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n            <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n\n\n        </div>\n    )\n}\n\nexport default HomeScreen\n","// import { initializeApp } from 'firebase/app';\n// import {auth} from 'firebase/auth';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBqehK2vWnkS9-v7Rh2bGGpu_Wgkr3YjI8\",\n  authDomain: \"netflix-clone-dd12c.firebaseapp.com\",\n  databaseURL: \"https://netflix-clone-dd12c-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"netflix-clone-dd12c\",\n  storageBucket: \"netflix-clone-dd12c.appspot.com\",\n  messagingSenderId: \"864634775014\",\n  appId: \"1:864634775014:web:6541040386fb489a3ae227\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\n\nexport {auth};\nexport default db;","import React,{useRef} from 'react'\nimport { auth } from '../../../firebaseControl';\nimport './styles.css'\n\nfunction SignInScreen() {\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n\n  \n  const register = (e) => {\n    e.preventDefault();\n    auth.createUserWithEmailAndPassword(\n      emailRef.current.value, \n      passwordRef.current.value\n      )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => {\n        alert(error.message);\n      })\n  }\n  const signIn = (e) => {\n    e.preventDefault();\n    auth.signInWithEmailAndPassword(\n      emailRef.current.value, \n      passwordRef.current.value\n      )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => {\n        alert(error.message);\n      })\n  }\n\n\n  return (\n    <div className=\"signInScreen\">\n      <form>\n        <h1>Sign In</h1>\n        <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\n        <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\n        <button onClick={signIn} type=\"submit\">Sign In</button>\n        <h4>\n          <span className=\"signInScreen__gray\">New to Netflix? </span>\n          <span className=\"signInScreen__link\" onClick={register}>Sign Up now.</span>\n        </h4>\n\n      </form>\n    </div>\n  )\n}\n\nexport default SignInScreen\n","import React,{useState} from 'react'\nimport './styles.css'\nimport SignInScreen from './SignInScreen'\n\nfunction Login() {\n  const [signIn,setSignIn] = useState(false)\n  return (\n    <div className=\"login\">\n      <div className=\"login__background\">\n        <img src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" className=\"login__logo\" />\n        <button onClick={() => setSignIn(true)} className=\"login__button\">\n          Sign In\n        </button>\n        <div className=\"login__gradient\"/>\n      </div>\n      <div className=\"login__body\">\n        {signIn ? (<SignInScreen/>) : (\n          <>\n          <h1>\n            Unlimited films, TV programmes and more.\n          </h1>\n          <h2>Watch anywhere. Cancel at anytime </h2>\n          <h3>Ready to start enter your email to create or restart your membership.</h3>\n          <div className=\"login__input\">\n            <form action=\"\">\n              <input type=\"email\" placeholder=\"Email Address\" />\n              <button onClick={() => setSignIn(true)} className=\"login__getstarted\">\n                GET STARTED\n              </button>\n            </form>\n          </div>\n        </>\n        )}\n        \n      </div>\n    </div>\n  )\n}\n\nexport default Login\n","import { createSlice } from '@reduxjs/toolkit';\n\n// const initialState = {\n//   value: 0,\n//   status: 'idle',\n// };\n\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState:{\n    user:null\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n    login: (state,action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    }\n  },\n\n});\n\nexport const { login,logout} = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\n\n\nexport default userSlice.reducer;\n","import React from 'react';\nimport Nav from '../../Nav';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../../../features/user/userSlice';\nimport {auth} from '../../../firebaseControl'\n\n\nimport './styles.css';\n\nfunction ProfileScreen() {\n  const user = useSelector(selectUser);\n\n  return (\n    <div className=\"profileScreen\">\n      <Nav/>\n      <div className=\"profileScreen__body\">\n        <h1>Edit Profile</h1>\n        <div className=\"profileScreen__info\">\n          <img \n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" \n            alt=\"Avatar\" \n          />\n          <div className=\"profileScreen__details\">\n            <h2>{user.email}</h2>\n            <div className=\"profileScreen__plans\">\n              <button\n                onClick={()=>auth.signOut()} \n                className=\"profileScreen__signout\"\n              >\n                  Sign Out\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ProfileScreen\n","import React,{useEffect} from \"react\";\nimport \"./App.css\";\nimport HomeScreen from \"./HomeScreen\";\nimport Login from \"./HomeScreen/Login\";\nimport ProfileScreen from \"./HomeScreen/Login/ProfileScreen\";\nimport { auth } from \"./firebaseControl\";\nimport { useDispatch,useSelector } from \"react-redux\";\nimport { login, logout, selectUser } from \"./features/user/userSlice\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const user = useSelector(selectUser);\n  // const user = null;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if(userAuth){\n        dispatch(login({\n          uid:userAuth.uid,\n          email:userAuth.email\n        }))\n\n      }else{\n        dispatch(logout())\n      }\n    });\n    return unsubscribe\n  }, [dispatch])\n\n  return (\n    <div className=\"app\">\n      {/* <HomeScreen /> */}\n      <Router>\n        {!user ? (<Login/>)\n          :(<Switch>\n            <Route path=\"/profile\">\n              <ProfileScreen/>\n            </Route>\n            <Route exact path=\"/\">\n              <h1>Hello</h1>\n              {/* <HomeScreen /> */}\n            </Route>\n          </Switch> )\n        }\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/user/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}